---

- name: "Create directory for configurations"
  file:
    path: "{{ playbook_dir }}/configurations"
    state: directory
    recurse: true
  delegate_to: localhost
  run_once: true

- name: "Create kubectl config"
  shell: "kubectl config set-cluster {{ vars.cluster_name }} \
          --certificate-authority={{ playbook_dir }}/certificates/certs/ca.pem \
          --embed-certs=true \
          --server=https://{{ vars.public_address }}:6443 \
          --kubeconfig={{ playbook_dir }}/configurations/bootstrap.kubeconfig"
  delegate_to: localhost
  run_once: true

- name: "Configure local kubectl credentials"
  shell: "kubectl config set-credentials kubelet-bootstrap \
            --token={{ vars.token }} \
            --kubeconfig={{ playbook_dir }}/configurations/bootstrap.kubeconfig"
  delegate_to: localhost
  run_once: true

- name: "Configure local kubectl context"
  shell: "kubectl config set-context default \
            --cluster={{ vars.cluster_name }} \
            --user=kubelet-bootstrap \
            --kubeconfig={{ playbook_dir }}/configurations/bootstrap.kubeconfig \
          && kubectl config use-context default \
            --kubeconfig={{ playbook_dir }}/configurations/bootstrap.kubeconfig"
  delegate_to: localhost
  run_once: true

- name: "Distribute configuration to workers"
  copy:
    src: "{{ playbook_dir }}/configurations/bootstrap.kubeconfig"
    dest: "/root"


#echo KUBE-PROXY CONFIG
#
#kubectl config set-cluster kubernetes-the-hard-way \
#  --certificate-authority=$CA_PATH/ca.pem \
#  --embed-certs=true \
#  --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443 \
#  --kubeconfig=kube-proxy.kubeconfig
#
#kubectl config set-credentials kube-proxy \
#  --client-certificate=$CERT_PATH/kube-proxy.pem \
#  --client-key=$CERT_PATH/kube-proxy-key.pem \
#  --embed-certs=true \
#  --kubeconfig=kube-proxy.kubeconfig
#
#kubectl config set-context default \
#  --cluster=kubernetes-the-hard-way \
#  --user=kube-proxy \
#  --kubeconfig=kube-proxy.kubeconfig
#
#kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
#
#for host in worker0 worker1 worker2; do
#  gcloud compute scp bootstrap.kubeconfig kube-proxy.kubeconfig ${host}:~/
#done